name: Windows Build

on:
  push:
    branches: [ main, fix/windows-build-workflow ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        php-version: ['8.1', '8.2', '8.3']
        arch: ['x64']
        ts: ['nts']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP Development Environment
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        architecture: ${{ matrix.arch }}
        threadsafe: ${{ matrix.ts == 'ts' }}
        tools: pecl, composer
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, sqlite3, pdo_pgsql, pgsql, curl, openssl, fileinfo, tokenizer, phar, filter, zip, pcntl, gd, exif, calendar, dom, xmlreader, xmlwriter, session, wddx, xmlrpc, ftp, odbc, odbc_pdo, pdo_odbc, soap, sockets, shmop, gettext, sysvmsg, sysvsem, sysvshm, tidy, snmp, pspell, recode, enchant, ffi, dba, gmp, exif, calendar, dom, xmlreader, xmlwriter, session, wddx, xmlrpc, ftp, odbc, odbc_pdo, pdo_odbc, soap, sockets, shmop, gettext, sysvmsg, sysvsem, sysvshm, tidy, snmp, pspell, recode, enchant, ffi, dba, gmp

    - name: Install Visual Studio Build Tools
      run: |
        # Install Visual Studio Build Tools for C++ development
        choco install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended" -y

    - name: Setup Visual Studio Environment
      run: |
        # Set up Visual Studio environment variables
        $env:Path = "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64;$env:Path"
        $env:INCLUDE = "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\MSVC\14.29.30133\include;$env:INCLUDE"
        $env:LIB = "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\MSVC\14.29.30133\lib\x64;$env:LIB"

    - name: Install PHP Development Tools
      run: |
        # Install PHP development tools using PECL
        pecl install --force --nodeps --ignore-errors judy

    - name: Build PHP Extension
      run: |
        # Navigate to the extension directory
        cd ${{ github.workspace }}
        
        # Check if phpize is available
        Write-Host "Checking for phpize..."
        if (Get-Command phpize -ErrorAction SilentlyContinue) {
          Write-Host "phpize found, proceeding with build..."
          
          # Run phpize
          phpize
          
          # Configure with Judy
          ./configure --with-judy=shared
          
          # Build the extension
          nmake
          
          # Run tests
          nmake test
          
          Write-Host "Extension build completed"
        } else {
          Write-Host "phpize not found, trying alternative approach..."
          
          # Try to find phpize in PHP installation
          $phpDir = (Get-Command php).Source | Split-Path -Parent
          $phpizePath = Join-Path $phpDir "phpize"
          
          if (Test-Path $phpizePath) {
            Write-Host "Found phpize at: $phpizePath"
            & $phpizePath
            ./configure --with-judy=shared
            nmake
            nmake test
          } else {
            Write-Host "phpize not found in PHP installation"
            Write-Host "Available files in PHP directory:"
            Get-ChildItem $phpDir | Select-Object Name
            exit 1
          }
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: judy-windows-${{ matrix.php-version }}-${{ matrix.arch }}-${{ matrix.ts }}
        path: |
          modules/judy.dll
          *.dll
        retention-days: 30

    - name: Create Release Assets
      if: github.event_name == 'release'
      run: |
        # Create release assets for Windows
        $releaseDir = "windows-release"
        New-Item -ItemType Directory -Path $releaseDir -Force
        
        # Copy DLL files
        if (Test-Path "modules/judy.dll") {
          Copy-Item -Path "modules/judy.dll" -Destination "$releaseDir/judy-${{ matrix.php-version }}-${{ matrix.arch }}-${{ matrix.ts }}.dll"
        }
        
        Write-Host "Release assets created in $releaseDir"
