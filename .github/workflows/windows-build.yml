name: Windows Build

on:
  push:
    branches: [ main, fix/windows-build-workflow ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        php-version: ['8.1', '8.2', '8.3']
        arch: ['x64']
        ts: ['nts']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP Development Environment
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        architecture: ${{ matrix.arch }}
        threadsafe: ${{ matrix.ts == 'ts' }}
        tools: pecl, composer
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, sqlite3, pdo_pgsql, pgsql, curl, openssl, fileinfo, tokenizer, phar, filter, zip, pcntl, gd, exif, calendar, dom, xmlreader, xmlwriter, session, wddx, xmlrpc, ftp, odbc, odbc_pdo, pdo_odbc, soap, sockets, shmop, gettext, sysvmsg, sysvsem, sysvshm, tidy, snmp, pspell, recode, enchant, ffi, dba, gmp

    - name: Install Visual Studio Build Tools
      run: |
        # Install Visual Studio Build Tools for C++ development
        choco install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended" -y

    - name: Setup Visual Studio Environment
      run: |
        # Set up Visual Studio environment variables
        $env:Path = "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64;$env:Path"
        $env:INCLUDE = "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\MSVC\14.29.30133\include;$env:INCLUDE"
        $env:LIB = "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\MSVC\14.29.30133\lib\x64;$env:LIB"

    - name: Download PHP SDK
      run: |
        # Download PHP SDK which includes development tools
        $phpVersion = "${{ matrix.php-version }}"
        $arch = "${{ matrix.arch }}"
        
        # Try to download PHP SDK from different sources
        $sdkUrls = @(
          "https://github.com/microsoft/php-sdk-binary-tools/releases/latest/download/php-sdk-$arch.zip",
          "https://github.com/microsoft/php-sdk-binary-tools/releases/download/8.1.0/php-sdk-$arch.zip"
        )
        
        Write-Host "Trying to download PHP SDK for $arch..."
        
        $sdkDir = "C:\php-sdk"
        New-Item -ItemType Directory -Path $sdkDir -Force
        
        $success = $false
        foreach ($sdkUrl in $sdkUrls) {
          Write-Host "Trying SDK URL: $sdkUrl"
          try {
            $sdkZip = "php-sdk.zip"
            Invoke-WebRequest -Uri $sdkUrl -OutFile $sdkZip -TimeoutSec 30
            Expand-Archive -Path $sdkZip -DestinationPath $sdkDir -Force
            $success = $true
            Write-Host "Successfully downloaded and extracted PHP SDK from: $sdkUrl"
            break
          } catch {
            Write-Host "Failed to download from: $sdkUrl"
            Write-Host "Error: $($_.Exception.Message)"
          }
        }
        
        if (-not $success) {
          Write-Host "Failed to download PHP SDK, trying alternative approach..."
          # Try to find phpize in the current PHP installation
          $phpDir = (Get-Command php).Source | Split-Path -Parent
          Write-Host "PHP installation directory: $phpDir"
          Write-Host "Available files:"
          Get-ChildItem $phpDir | Select-Object Name
        }

    - name: Download Judy Library
      run: |
        # Download pre-built Judy library for Windows
        $judyUrl = "https://github.com/orieg/php-judy/releases/download/v2.2.0/judy-windows-lib.zip"
        $judyZip = "judy-lib.zip"
        
        Write-Host "Downloading Judy library..."
        try {
          Invoke-WebRequest -Uri $judyUrl -OutFile $judyZip
          Expand-Archive -Path $judyZip -DestinationPath "C:\judy" -Force
          Write-Host "Judy library installed to C:\judy"
        } catch {
          Write-Host "Judy library not found, will need to build from source"
        }

    - name: Build PHP Extension
      run: |
        # Navigate to the extension directory
        cd ${{ github.workspace }}
        
        # Check if phpize is available
        Write-Host "Checking for phpize..."
        
        # Try multiple locations for phpize
        $phpizePaths = @(
          "C:\php-sdk\phpize.exe",
          "C:\php\phpize.exe",
          (Join-Path (Get-Command php).Source | Split-Path -Parent) "phpize.exe"
        )
        
        $phpizeFound = $false
        foreach ($phpizePath in $phpizePaths) {
          if (Test-Path $phpizePath) {
            Write-Host "Found phpize at: $phpizePath"
            
            # Run phpize
            & $phpizePath
            
            # Configure with Judy
            ./configure --with-judy=shared
            
            # Build the extension
            nmake
            
            # Run tests
            nmake test
            
            Write-Host "Extension build completed"
            $phpizeFound = $true
            break
          }
        }
        
        if (-not $phpizeFound) {
          Write-Host "phpize not found in any expected location"
          Write-Host "Available files in PHP SDK directory:"
          if (Test-Path "C:\php-sdk") {
            Get-ChildItem "C:\php-sdk" -Recurse | Select-Object Name
          }
          Write-Host "Available files in PHP installation:"
          $phpDir = (Get-Command php).Source | Split-Path -Parent
          Get-ChildItem $phpDir | Select-Object Name
          exit 1
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: judy-windows-${{ matrix.php-version }}-${{ matrix.arch }}-${{ matrix.ts }}
        path: |
          modules/judy.dll
          *.dll
        retention-days: 30

    - name: Create Release Assets
      if: github.event_name == 'release'
      run: |
        # Create release assets for Windows
        $releaseDir = "windows-release"
        New-Item -ItemType Directory -Path $releaseDir -Force
        
        # Copy DLL files
        if (Test-Path "modules/judy.dll") {
          Copy-Item -Path "modules/judy.dll" -Destination "$releaseDir/judy-${{ matrix.php-version }}-${{ matrix.arch }}-${{ matrix.ts }}.dll"
        }
        
        Write-Host "Release assets created in $releaseDir"
